volumes:
  product-service-data:
  offering-service-data:
  order-service-data:
  shopping-basket-service-data:

services:
  # Kafka
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
  shared-kafka:
    image: confluentinc/cp-kafka:latest
    hostname: shared-kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://shared-kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

#  cp-schema-registry:
#    depends_on:
#      - shared-kafka
#    environment:
#      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
#      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://shared-kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
#      SCHEMA_REGISTRY_HOST_NAME: localhost
#      SCHEMA_REGISTRY_LISTENERS: http://localhost:8081
#      SCHEMA_REGISTRY_DEBUG: true
#    image: confluentinc/cp-schema-registry:7.7.1

  # Payment
#  mssql-payment:
#    image: "mcr.microsoft.com/mssql/server:2022-latest"
#    container_name: sql_server2022
#    ports: # not actually needed, because the two services are on the same network
#      - "1433:1433"
#    environment:
#      - ACCEPT_EULA=y
#      - SA_PASSWORD=yourStrong(!)Password
#  payment-worker:
#    image: ghcr.io/eda-ecommerce/payment-worker:latest
#    container_name: payment-worker
#    environment:
#      - DBSTRING=Data Source=127.0.0.1,1433;Initial Catalog=payment;Persist Security Info=True;User Id=sa;Password=yourStrong(!)Password;TrustServerCertificate=True
#      - KAFKABROKER=shared-kafka:9092
#      - KAFKATOPIC1=order
#      - KAFKATOPIC2=payment
#    network_mode: "host"
#    ports:
#      - "1433:1433"
#  payment-webapi:
#    image: ghcr.io/eda-ecommerce/payment-webapi:latest
#    container_name: payment-webapi
#    depends_on:
#      - mssql-payment
#      - payment-worker
#    ports:
#      - "8080:8080"
#      - "8081:8081"
#    environment:
#      - DBSTRING=Data Source=sql_server2022;Initial Catalog=payment;Persist Security Info=True;User Id=SA;Password=yourStrong(!)Password;TrustServerCertificate=True
#      - KAFKABROKER=shared-kafka:9092
#      - KAFKATOPIC=payment
  # Product
  init-product-service-data:
    image: alpine
    volumes:
      - product-service-data:/deployments/databases
    entrypoint: [ "/bin/sh", "-c", "chown 185:185 /deployments/databases && exit 0" ]
    init: true
  product-service:
    image: ghcr.io/eda-ecommerce/product-service:1.4.4
    container_name: product-service
    restart: always
    depends_on:
      init-product-service-data:
        condition: service_completed_successfully
      shared-kafka:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: shared-kafka:9092
    ports:
      - "8082:8080"
    user: "185:185" # For proper filesystem permissions
    volumes:
      - product-service-data:/deployments/databases
  # Offering
  init-offering-service-data:
    image: alpine
    volumes:
      - offering-service-data:/deployments/databases
    entrypoint: [ "/bin/sh", "-c", "chown 185:185 /deployments/databases && exit 0" ]
    init: true
  offering-service:
    image: ghcr.io/eda-ecommerce/offering-service:1.6.5
    container_name: offering-service
    restart: always
    depends_on:
      init-offering-service-data:
        condition: service_completed_successfully
      shared-kafka:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: shared-kafka:9092
    ports:
      - "8083:8081"
    user: "185:185" # For proper filesystem permissions
    volumes:
      - offering-service-data:/deployments/databases
  # Order
  init-order-service-data:
    image: alpine
    volumes:
      - order-service-data:/deployments/databases
    entrypoint: [ "/bin/sh", "-c", "chown 185:185 /deployments/databases && exit 0" ]
    init: true
  order-service:
    image: ghcr.io/eda-ecommerce/order-service:1.1.0
    container_name: order-service
    restart: always
    depends_on:
      init-order-service-data:
        condition: service_completed_successfully
      shared-kafka:
        condition: service_started
    environment:
      KAFKA_BOOTSTRAP_SERVERS: shared-kafka:9092
    ports:
      - "8084:8080"
    user: "185:185" # For proper filesystem permissions
    volumes:
      - order-service-data:/deployments/databases
  # Shipping basket
  shopping-basket-db:
    image: mysql:8.2.0
    volumes:
      - ./provision-db:/docker-entrypoint-initdb.d
      - shopping-basket-service-data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: verysecurepassword
      MYSQL_ROOT_HOST: "%"
      MYSQL_DATABASE: database
      MYSQL_USER: shoppingbasket
      MYSQL_PASSWORD: XpJjf6C67RXjA4
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -u root -prootpassword" ]
      interval: 5s
      timeout: 10s
      retries: 2
  shopping-basket-service:
    image: ghcr.io/eda-ecommerce/shoppingbasket-service:1.4.6
    container_name: shopping-basket-service
    environment:
      KAFKA_BOOTSTRAP_ADDRESS: shared-kafka:9092
      DB_DBNAME: database
      DB_USERNAME: shoppingbasket
      DB_HOST: shopping-basket-db:3306
      DB_PASSWORD: XpJjf6C67RXjA4
    ports:
      - "8085:8080"
    depends_on:
      shared-kafka:
        condition: service_started
      shopping-basket-db:
        condition: service_healthy
